// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User's own brainstormed projects
  projects        Project[]
  // Projects assigned to this user for review
  assignedProjects ProjectAssignment[]
  // Reviews made by this user
  reviews         Review[]
  // Questions asked by this user
  questions       Question[]
  // Answers given by this user
  answers         Answer[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  originalText String
  enhancedText String?
  status      ProjectStatus @default(BRAINSTORMED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner of the project
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Project assignments for review
  assignments ProjectAssignment[]
  // Reviews for this project
  reviews     Review[]
  // Questions about this project
  questions   Question[]

  @@map("projects")
}

model ProjectAssignment {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  status    AssignmentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_assignments")
}

model Review {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  notes     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Question {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  questionId String
  userId     String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

enum ProjectStatus {
  BRAINSTORMED
  ENHANCED
  ASSIGNED
  REVIEWED
  COMPLETED
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
